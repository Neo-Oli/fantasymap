import re, argparse
parser = argparse.ArgumentParser()
parser.add_argument('-x', action='store_true', help='print HTML instead of ANSI')
parser.add_argument('-v', action='store_true', help='Do not print anything. Usefull for checking for errors in the mapfile')
options = parser.parse_args()

with open ("mapfile.map", "r") as myfile:
	map=myfile.read()




groundtype={}
groundtype[('w','name')]="water"
groundtype[('w','color')]="on_blue"
groundtype[('w','texture')]="░"
groundtype[('w','texturecolor')]="iblue"
groundtype[('d','name')]="sand"
groundtype[('d','color')]="on_yellow"
groundtype[('d','texture')]="~"
groundtype[('d','texturecolor')]="yellow"
groundtype[('g','name')]="grass"
groundtype[('g','color')]="on_green"
groundtype[('g','texture')]=" "
groundtype[('g','texturecolor')]="igreen"
groundtype[('i','name')]="snow"
groundtype[('i','color')]="on_biwhite"
groundtype[('i','texture')]=" "
groundtype[('i','texturecolor')]="white"
groundtype[('s','name')]="street"
groundtype[('s','color')]="on_white"
groundtype[('s','texture')]="█"
groundtype[('s','texturecolor')]="white"

groundtype[('l','name')]="label"
groundtype[('l','color')]="on_black"
groundtype[('l','texture')]="█"
groundtype[('l','texturecolor')]="white"


obj={}
obj[('y','name')]="farmland"
obj[('y','r')]="▓"
obj[('y','color')]="yellow"

obj[('a','name')]="forrest"
obj[('a','r')]="♣"
obj[('a','color')]="bigreen"

obj[('ä','name')]="forrest2"
obj[('ä','r')]="♠"
obj[('ä','color')]="bigreen"

obj[('à','name')]="palmforrest"
obj[('à','r')]="Γ"
obj[('à','color')]="bigreen"

obj[('b','name')]="building"
obj[('b','r')]="▪"
obj[('b','color')]="black"

obj[('B','name')]="multiblock_building"
obj[('B','r')]="█"
obj[('B','color')]="black"

obj[('m','name')]="mountain"
obj[('m','r')]="▲"
obj[('m','color')]="bblack"

obj[('0','name')]="street_crossing"
obj[('0','r')]="┼"
obj[('0','color')]="white"

obj[('-','name')]="street_h"
obj[('-','r')]="─"
obj[('-','color')]="white"

obj[('|','name')]="street_v"
obj[('|','r')]="│"
obj[('|','color')]="white"

obj[('1','name')]="street_c1"
obj[('1','r')]="┐"
obj[('1','color')]="white"

obj[('2','name')]="street_c2"
obj[('2','r')]="┌"
obj[('2','color')]="white"

obj[('3','name')]="street_c3"
obj[('3','r')]="┘"
obj[('3','color')]="white"

obj[('4','name')]="street_c4"
obj[('4','r')]="└"
obj[('4','color')]="white"

obj[('5','name')]="street_c5"
obj[('5','r')]="┬"
obj[('5','color')]="white"

obj[('6','name')]="street_c6"
obj[('6','r')]="┴"
obj[('6','color')]="white"

obj[('7','name')]="street_c7"
obj[('7','r')]="┤"
obj[('7','color')]="white"

obj[('8','name')]="street_c8"
obj[('8','r')]="├"
obj[('8','color')]="white"

obj[('9','name')]="street_none"
obj[('9','r')]="▪"
obj[('9','color')]="white"

obj[('j','name')]="bridgev"
obj[('j','r')]="║"
obj[('j','color')]="white"

obj[('q','name')]="bridgeh"
obj[('q','r')]="═"
obj[('q','color')]="white"

obj[('w','name')]="pool"
obj[('w','r')]="▐"
obj[('w','color')]="blue"

obj[('o','name')]="pond"
obj[('o','r')]="●"
obj[('o','color')]="blue"

obj[(' ','name')]="empty"
obj[(' ','r')]=" "
obj[(' ','color')]=""

reset='\033[0m';black='\033[0;30m';red='\033[0;31m';green='\033[0;32m';yellow='\033[0;33m';blue='\033[0;34m';purple='\033[0;35m';cyan='\033[0;36m';white='\033[0;37m';bblack='\033[1;30m';bred='\033[1;31m';bgreen='\033[1;32m';byellow='\033[1;33m';bblue='\033[1;34m';bpurple='\033[1;35m';bcyan='\033[1;36m';bwhite='\033[1;37m';ublack='\033[4;30m';ured='\033[4;31m';ugreen='\033[4;32m';uyellow='\033[4;33m';ublue='\033[4;34m';upurple='\033[4;35m';ucyan='\033[4;36m';uwhite='\033[4;37m';on_black='\033[40m';on_red='\033[41m';on_green='\033[42m';on_yellow='\033[43m';on_blue='\033[44m';on_purple='\033[45m';on_cyan='\033[46m';on_white='\033[47m';iblack='\033[0;90m';ired='\033[0;91m';igreen='\033[0;92m';iyellow='\033[0;93m';iblue='\033[0;94m';ipurple='\033[0;95m';icyan='\033[0;96m';iwhite='\033[0;97m';biblack='\033[1;90m';bired='\033[1;91m';bigreen='\033[1;92m';biyellow='\033[1;93m';biblue='\033[1;94m';bipurple='\033[1;95m';bicyan='\033[1;96m';biwhite='\033[1;97m';on_iblack='\033[0;100m';on_ired='\033[0;101m';on_igreen='\033[0;102m';on_iyellow='\033[0;103m';on_iblue='\033[0;104m';on_ipurple='\033[0;105m';on_icyan='\033[0;106m';on_iwhite='\033[0;107m';on_biblack='\033[1;100m';on_bired='\033[1;101m';on_bigreen='\033[1;102m';on_biyellow='\033[1;103m';on_biblue='\033[1;104m';on_bipurple='\033[1;105m';on_bicyan='\033[1;106m';on_biwhite='\033[1;107m';


htmlstart="""
<!DOCTYPE html><html><head><meta charset="UTF-8"><style type="text/css">@import url(https://fonts.googleapis.com/css?family=Roboto+Mono);
body{white-space:nowrap;margin:0}i{line-height:16px;font-family:'Roboto Mono',monospace;margin:0;vertical-align:top;display:inline-block;white-space:pre;height:20px;font-size:18px;text-align:center;font-style:normal}br:first-child{display:none}.black{color:#282828}.red{color:#cc241d}.green{color:#98971a}.yellow{color:#d79921}.blue{color:#458588}.purple{color:#689d6a}.cyan{color:#689d6a}.white{color:#a89985}.bblack{color:#282828}.bred{color:#cc241d}.bgreen{color:#98971a}.byellow{color:#d79921}.bblue{color:#458588}.bpurple{color:#689d6a}.bcyan{color:#689d6a}.bwhite{color:#a89985}.ublack{color:#282828}.ured{color:#cc241d}.ugreen{color:#98971a}.uyellow{color:#d79921}.ublue{color:#458588}.upurple{color:#689d6a}.ucyan{color:#689d6a}.uwhite{color:#a89985}.on_black{background-color:#282828}.on_red{background-color:#cc241d}.on_green{background-color:#98971a}.on_yellow{background-color:#d79921}.on_blue{background-color:#458588}.on_purple{background-color:#689d6a}.on_cyan{background-color:#689d6a}.on_white{background-color:#a89985}.iblack{color:#928379}.ired{color:#fb4934}.igreen{color:#b8bb26}.iyellow{color:#fabd2f}.iblue{color:#83a590}.ipurple{color:#d3869b}.icyan{color:#8ec07c}.iwhite{color:#ebdbb2}.biblack{color:#928379}.bired{color:#fb4934}.bigreen{color:#b8bb26}.biyellow{color:#fabd2f}.biblue{color:#83a590}.bipurple{color:#d3869b}.bicyan{color:#8ec07c}.biwhite{color:#ebdbb2}.on_iblack{background-color:#282828}.on_ired{background-color:#cc241d}.on_igreen{background-color:#98971a}.on_iyellow{background-color:#d79921}.on_iblue{background-color:#458588}.on_ipurple{background-color:#689d6a}.on_icyan{background-color:#689d6a}.on_iwhite{background-color:#a89985}.on_biblack{background-color:#928375}.on_bired{background-color:#fb4934}.on_bigreen{background-color:#b8bb26}.on_biyellow{background-color:#fabd2f}.on_biblue{background-color:#83a590}.on_bipurple{background-color:#d3869b}.on_bicyan{background-color:#8ec07c}.on_biwhite{background-color:#ebdbb2}
</style></head><body class="on_black">
"""
htmlend="</body></html>"



if options.x:
  if not options.v:
    print(htmlstart)
lines=map.split('\n')
map=None
i=0
for line in lines:
  charsinline=re.findall("..", line)
  j=0
  lastcc=""
  lastfg=""
  lastbg=""
  for cc in charsinline:
    if cc==lastcc and cc!=" x":
      character=lastcharacter
      backgroundcolor=lastbg
      foregroundcolor=lastfg
    else:
      c=list(cc)
      c0=c[0]
      thisj=j
      while c0==" ":
        thisj-=1
        c0=list(charsinline[thisj])[0]
      if c0 == "l":
        backgroundcolor=groundtype[c0, "color"]
        foregroundcolor=groundtype[c0, "texturecolor"]
        character=c[1]
      else:
        if c[1] == "x":
          try:
            leftcc=list(charsinline[j-1])
          except IndexError:
            leftcc=[" ", " "]
          try:
            rightcc=list(charsinline[j+1])
          except IndexError:
            rightcc=[" ", " "]
          try:
            upcc=list(re.findall("..", lines[i-1])[j])
          except IndexError:
            upcc=[" ", " "]
          try:
            downcc=list(re.findall("..", lines[i+1])[j])
          except IndexError:
            downcc=[" ", " "]
          uptrue=upcc[1] in ["x","|","0","1","2","5","7","8","j"]
          downtrue=downcc[1] in ["x","|","0","3","4","6","7","8","j"]
          lefttrue=leftcc[1] in ["x","-","0","2","4","5","6","8","q"]
          righttrue=rightcc[1] in ["x","-","0","1","3","5","6","7","q"]
          if uptrue and downtrue and lefttrue and righttrue:
            c1="0"
          elif not uptrue and not downtrue and lefttrue and righttrue:
            c1="-"
          elif not uptrue and not downtrue and lefttrue and not righttrue:
            c1="-"
          elif not uptrue and not downtrue and not lefttrue and righttrue:
            c1="-"
          elif uptrue and downtrue and not lefttrue and not righttrue:
            c1="|"
          elif uptrue and not downtrue and not lefttrue and not righttrue:
            c1="|"
          elif not uptrue and downtrue and not lefttrue and not righttrue:
            c1="|"
          elif not uptrue and downtrue and lefttrue and not righttrue:
            c1="1"
          elif not uptrue and downtrue and not lefttrue and righttrue:
            c1="2"
          elif uptrue and not downtrue and lefttrue and not righttrue:
            c1="3"
          elif uptrue and not downtrue and not lefttrue and righttrue:
            c1="4"
          elif not uptrue and downtrue and lefttrue and righttrue:
            c1="5"
          elif uptrue and not downtrue and lefttrue and righttrue:
            c1="6"
          elif uptrue and downtrue and lefttrue and not righttrue:
            c1="7"
          elif uptrue and downtrue and not lefttrue and righttrue:
            c1="8"
          elif not uptrue and not downtrue and not lefttrue and not righttrue:
            c1="9"
          else:
            c1="9"
        else:
          c1=c[1]
        if c1 == " ":
          foregroundcolor=groundtype[c0,"texturecolor"]
        else:
          try:
            foregroundcolor=obj[c1,"color"]
          except KeyError:
            print("\nError at line:"+str(i)+":"+str(j*2))
            exit()
        backgroundcolor=groundtype[c0,"color"]
        if c1 == " ":
          character=groundtype[c0,"texture"]
        else:
          character=obj[c1,"r"]
    if options.x:
      if lastbg==backgroundcolor and lastfg==foregroundcolor:
        if not options.v:
          print(character, end="")
      else:
        if not j==0:
          if not options.v:
            print("</i>",end="")
        if not options.v:
          print("<i class=\""+foregroundcolor+" "+backgroundcolor+"\">"+character, end="")
      if j==len(charsinline)-1:
        if not options.v:
          print("</i>",end="")
    else:
      if lastbg is not backgroundcolor or lastfg is not foregroundcolor:
        if not options.v:
          print(globals()[foregroundcolor]+globals()[backgroundcolor],end="")
      if not options.v:
        print(character, end="")
    lastbg=backgroundcolor
    lastfg=foregroundcolor
    lastcc=cc
    lastcharacter=character
    j+=1
  if options.x:
    if not options.v:
      print("<br />",end="")
  else:
    if not options.v:
      print(reset)
  i+=1


if options.x:
  if not options.v:
    print(htmlend)

